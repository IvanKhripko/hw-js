
// TASK 7 (FUNCTION DECLARATION AND CALL)
// ** Функция ** - это подпрограмма, независимая часть кода,
// предназначенная для многократного выполнения конкретной
// задачи с разными начальными значениями.
// Функцию можно представить как чёрный ящик, она получает
// что - то на входе(данные), и возвращает что - то на выходе
// (результат выполнения кода внутри неё).

// // 1. Объявление функции multiply
// function multiply() {
//   // Тело функции
//   console.log("multiply function invocation");
// }

// // 2. Вызовы функции multiply
// multiply(); // multiply function invocation
// multiply(); // multiply function invocation
// multiply(); // multiply function invocation
// Объявление функции начинается с ключевого слова function,
// за которым идёт её имя - глагол отвечающий на вопрос
// «Что сделать ?» и пара круглых скобок.Тело функции заключено в
// фигурные скобки { } и содержит инструкции, которые необходимо
// выполнить при её вызове.Затем, когда необходимо, функция
// вызывается с помощью имени и пары круглых скобок.

// ПАРАМЕТРЫ И РЕЗУЛЬТАТЫ
// В круглых скобках после имени функции идут параметры - перечисление данных, которые функция ожидает при вызове.

// Параметры - это локальные переменные доступные только в теле функции. Они разделяются запятыми. Параметров 
// может быть несколько или вообще их может не быть, тогда записываются просто пустые круглые скобки.

// При вызове функции, в круглых скобках можно передать аргументы - значения для объявленных параметров функции.

// // 1. Объявление параметров x, y, z
// function multiply(x, y, z) {
//   console.log(`Результат умножения равен ${x * y * z}`);
// }

// // 2. Передача аргументов
// multiply(2, 3, 5); // Результат умножения равен 30
// multiply(4, 8, 12); // Результат умножения равен 384
// multiply(17, 6, 25); // Результат умножения равен 2550
// Порядок передачи аргументов должен соответствует порядку объявленых параметров: значение первого аргумента 
// будет присвоено первому параметру, второго аргумента второму параметру и т.д.